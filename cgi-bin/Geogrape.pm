#!/usr/bin/perl

package Geogrape;
require Exporter;

use strict;

our @ISA = qw(Exporter);
our @EXPORT_OK = qw($requestIdsFile $valueDefs %subboroughs $database $user $password $graphs $overlays $icons $piecharts @dataTypes $icon0 $icon1 $icon01 $local_geogrape_path $url_geogrape_path $baseUrl &checkRequest &filterRequestId &timedRequestId &untimedRequestId &mapRequestId);

use strict;
use JSON::XS;
use Clone qw(clone);
#use Digest::MD5 qw(md5 md5_hex md5_base64);
#use Digest::CRC qw(crc32 crc16 crc crc8);
#use XML::Simple qw(:strict);
use XML::Dumper;
use Digest::Adler32;

use Geogrape_Config qw( $database $user $password );

our $isDeed = "(party1info != 'referee' and party1info != 'financecommish' and party2info != 'financecommish' and info != 'party1isparty2')";
our $isMortgageForeclosure = "(party1info = 'referee')";
our $isTaxForeclosure = "((party1info = 'financecommish' or party2info = 'nyc')/* and (info IS NULL or info != 'vacatedorder')*/)";

our $baseUrl = "http://127.0.0.1";
#our $geogrape_folder = "nycgeogrape3";
#our $geogrape_folder = "site";

our $url_geogrape_path = "";
our $local_geogrape_path = "/Users/talos/Programming/geogrape/site";

our $overlays = "overlays";
our $piecharts = "piecharts";
our $graphs = "graphs";
our $icons = "icons";

#our $pieChartLocation = "$local_geogrape_path/$piecharts/tmp/geogrape-$";

our $icon0 = "ltblu-circle.png";
our $icon1 = "pink-circle.png";
our $icon01 = "purple-circle.png";

our $requestIdsFile = "requestIds.xml"; # <xml><hashes><hash id=""><request>...</request></hash></hashes></xml>

# the parts of the filter request that are saved in the ID -- everything else will not be considered in the hash.
our @filterComponents = ('lotValues', 'type', 'values', 'thenFilter', 'graphSort', 'dataType');

# the parts of the request that are required
our @requiredRequestComponents = ('zoom');

our @dataTypes = ('sumSum', 'sumNumber', 'sumDollar');
our $defaultDataType = 'sumSum';

our $valueDefs = {
    'from' => {'columnName' => 'party1concat', 'type' => 'text'},
    'to' => {'columnName' => 'party2concat', 'type' => 'text'},
#    'worth' => {'columnName' => 'dollar', 'type' => 'number'},
    'bottom' => {'columnName' => 'dollar', 'type' => 'number'},
    'top' => {'columnName' => 'dollar', 'type' => 'number'},
    'zoning1' => {'columnName' => 'allzoning1', 'type' => 'text'},
    'zoning2' => {'columnName' => 'allzoning2', 'type' => 'text'},
    'numbldgs' => {'columnName' => 'numbldgs', 'type' => 'number'},
    'bldgclass' => {'columnName' => 'bldgclass', 'type' => 'text'},
    'unitsres' => {'columnName' => 'unitsres', 'type' => 'number'},
    'bct2000' => {'columnName' => 'bct2000', 'type' => 'number'}
};

sub checkRequest {
    my $request = $_[0];
    foreach my $requiredComponent (@requiredRequestComponents) {
	unless($request->{$requiredComponent}) {
#	    print STDERR "Request is lacking required component $requiredComponent.\n";
	    die "Request is lacking required component $requiredComponent.\n";
	}
    }
}
sub stripFilterRequest { # strip out the name attribute from any filter requests.  could be extended to strip out any number of other attributes. this is passed a ref, and -is destructive-, therefore pass a clone of the ref unless destruction of the non-component attributes is desired.
    my $filterRequest = $_[0];
#    $filterRef->[$i] = clone($request->{'filter'}->[$i]);
    foreach my $component (keys %{$filterRequest}) {
	if(grep(/$component/, @filterComponents)) {
	    # could check to make sure it's in good format.
	} else {
	    delete(${$filterRequest}{$component});
	}
    }
    return $filterRequest;
}
sub filterRequestId { # only for the filter request
   my $filterRequestName = $_[0]->{'name'};
   my $filterRequest = encode_json(&stripFilterRequest(clone($_[0]))); # clone so that we don't eliminate useful attributes in the original
   my $supplemental;
   if($_[1]) { # don't save supplemental requests in the XML file.
       $supplemental = $_[1];
       print STDERR "supplemental: $supplemental\n";
   }


    my $a32 = Digest::Adler32->new;
    $a32->add($filterRequest);
    my $requestId = $a32->hexdigest;

#   return $requestId;
   if(!$supplemental) {
       print STDERR "updating XML file $requestIdsFile\n";
       my $requestIdsRef = xml2pl($requestIdsFile);
       
       if(!ref($requestIdsRef)) {
	   $requestIdsRef = {$requestId => [$filterRequestName, $filterRequest]}; # if blank file, create a new hash.
	   pl2xml($requestIdsRef, $requestIdsFile);
       } elsif(!$requestIdsRef->{$requestId}) { # this will create multiples for odd zooms & views.
	   $requestIdsRef->{$requestId} = [$filterRequestName, $filterRequest];
	   pl2xml($requestIdsRef, $requestIdsFile);
       } elsif ($requestIdsRef->{$requestId}->[1] ne $filterRequest) {
	   print STDERR "Mismatch between $requestId and $filterRequest.\n";
       }
   }
    print STDERR "base: ".$filterRequest.",".$requestId."\n";

   return $requestId;
}
#sub mapRequestId {  # map requests need their own, final, ID for the KML/KMZ files -- this differs from the underlying XML in the presence of a specific data type.
# it is equivalent to having to save the JSON code sent via AJAX for graphs and pie charts.  In those, data type matters too, but the JSON is not saved anywhere except on the client (so it needs no special ID)
#    my $request = $_[1];
#    my $filterRequest = $_[1];
#    my $dataType = $filterRequest->{'dataType'};
#    my $dataType = $_[1];
#    my $timedFilterRequestId = $_[0];

#    my $a32 = Digest::Adler32->new;
#    $a32->add($timedFilterRequestId.$dataType);
#    my $requestId = $a32->hexdigest;

#    print STDERR "map KMZ/KML: ".$timedFilterRequestId.",".$requestId."\n";
#    return $requestId;
#}

# timed request IDs are for maps & pie charts.  Now includes specific data type for all (thus eliminating need for separate mapRequestId)
sub timedRequestId {
    my $request = $_[1];
    my $dates = encode_json($request->{'dates'});
    my $zoom = $request->{'zoom'};
#    my $dataType = $request->{'filter'}->{'dataType'};
#    if(!$dataType) {
#	my $dataType = $defaultDataType;
#    }
#    print STDERR "timedRequestId dataType: $dataType\n";
#    print STDERR encode_json($request)."\n";
    my $view = '';
    if($request->{'view'}) {
	$view = encode_json($request->{'view'});
    }
#    my $filterRequestId = &filterRequestId($_[0]);
    my $filterRequestId = $_[0];

    my $a32 = Digest::Adler32->new;
    $a32->add($filterRequestId.$dates.$zoom.$view);
    my $requestId = $a32->hexdigest;

#    my $requestId = md5_base64($filterRequest, $dates);
#    my $requestId = crc8($filterRequest.$dates);
    print STDERR "timed: ".$filterRequestId.",".$requestId."\n";

    return $requestId;
}
# untimed request IDs are for graphs
sub untimedRequestId {
    my $request = $_[1];

    my $view = '';
    if($request->{'view'}) {
	$view = encode_json($request->{'view'});
    }
    my $zoom = $request->{'zoom'};
#    my $filterRequestId = &filterRequestId($_[0]);
    my $filterRequestId = $_[0];

#    print STDERR $filterRequest."\n";
#    my $requestId = md5_base64($filterRequest);
#    my $requestId = crc8($filterRequest);
    my $a32 = Digest::Adler32->new;
    $a32->add($filterRequestId.$zoom.$view);
    my $requestId = $a32->hexdigest;

    print STDERR "untimed: ".$filterRequestId.",".$requestId."\n";

    return $requestId;
}
#sub requestJSON {
#    my $filterRequest = encode_json($_[0]);
#    return $filterRequest;
#}
our $sampleRequest1 = '
{
    "zoom": "city",
    "dates": [198701, 198712],
    "filter": {
	"type": "mortgage",
	"then": [
		 {
		     "after": [1,1000],
		     "type": "foreclosure"
		 }
		 ]
	}
}';

our $sampleRequest2 = '
{
    "zoom": "city",
    "dates": [200601, 200812],
    "filter": [{
	"type": "mortgage",
	    "name": "WAaccklyy Name!!!"
	}
    ]
}';


# banks!
our %knownBanks = (
	'greenpointSavings' => "party2 like '%GREEN%POINT%'",
	'chaseManhattan' => "party2 like '%CHASE%MAN%'",
	'bayRidge' => "party2 like 'BAY%RIDGE%'",
	'easternService' => "party2 like 'EAST%SERV%'",
	'firstNational' => "party2 like 'FIRST%NATION%'",
	'dimeSavings' => "party2 like '%DIME%SAV%'",
	'uii' => "party2 like 'U%I%I%FUND%'",
	'uisc' => "party2 like 'UNIT%INST%SERV%'",
	'lincolnSavings' => "party2 like 'LINCOLN%SAV%'",
	'southBrooklynSavings' => "party2 like 'SOUTH%BROOK%SAV%'",
	'brooklynSavings' => "party2 like '%BROOKLYN%SAV%'",
	'hamburgSavings' => "party2 like 'HAMBURG%SAV%'",
	'soswinEstates' => "party2 like 'SOSWIN%EST%'",
	'samHoffman' => "party2 like 'HOFFMAN%SAM'", # ?
	'homeFederal' => "party2 like 'HOME%FED%'",
	'rockland' => "party2 like 'ROCKLAND%'",
	'interIsland' => "party2 like 'INTER%ISLAND%'",
	'deltaCapital' => "party2 like 'DELTA%CAP%'",
	'springfieldEquities' => "party2 like 'SPRING%EQUIT%'",
	'daleFunding' => "party2 like 'DALE%FUND%'",
	'jackGoldberg' => "party2 like 'GOLDBERG%JACK%'",
	'bankersTrust' => "party2 like 'BANKER%TRUST%'",
	'regency' => "party2 like 'REGENCY%'",
	'atlasSL' => "party2 like 'ATLAS%SAV%'",
	'empbanqueCapital' => "party2 like 'EMPBAN%CAP%'",
	'sunnysideSL' => "party2 like 'SUNNYSIDE%SAV%'",
	'relianceFunding' => "party2 like 'RELIAN%FUND%'",
	'manufacturersTrust' => "party2 like 'MANUFACT%TR%'",
	'brookhavenServ' => "party2 like 'BROOKHAV%SERV%'",
	'chemicalBank' => "party2 like 'CHEMIC%BANK%'",
	'unionMortgage' => "party2 like 'UNION_M%E%'",
	'interCountyMortgage' => "party2 like 'INTERCOUNTY_M%E%'",
	'vanguardHolding' => "party2 like 'VANGUARD%HOLD%'",
	'nysUrbanDev' => "party2 like 'N%Y%S%URBAN%DEV%'",
	'citi' => "party2 like 'CITI%'",
	'oxfordResources' => "party2 like 'OXFORD%RES%'",
	'metromedia' => "party2 like 'METROMED%'",
	'bankOfCommerce' => "party2 like 'BANK%COMMERCE%'",
	'kadilacFunding' => "party2 like 'KADILAC%FUND%'",
	'NYCHPD' => "(party2 like 'NYC%HPD' or party2 like '%HOUS%PRES%DEV%')",
	'capitalResources' => "party2 like 'CAPITAL%RES%'",
	'norstar' => "party2 like 'NORSTAR%'",
	'manhattanSavings' => "party2 like 'MANHAT%SAV%'",
	'republicBank' => "party2 like 'REPUBLIC%'",
	'fleetBank' => "party2 like 'FLEET%'",
	'communityPreservation' => "party2 like 'COMMUNITY%PRES%'",
	'FHB' => "party2 like 'FHB%'",
	'GMAC' => "party2 like 'GMAC%'",
	'HSBC' => "party2 like 'HSBC%'",
	'wellsFargo' => "party2 like 'WELLS%FARGO%'",
	'indyMac' => "party2 like 'INDYMAC%'",
	'JPMorgan' => "party2 like 'JPMORGAN%'", # successor to Chase
	'wamu' => "party2 like 'WASH%MUT%'",
	'argent' => "party2 like 'ARGENT%'",
	'optionOne' => "party2 like 'OPTION%ONE%'",
	'bankOfAmerica' => "party2 like 'BANK%AMERICA%'",
	'ameriquest' => "party2 like 'AMERIQUEST%'",
	'brooklynBridgeDev' => "party2 like 'BROOK%BRIDGE%DEV%'",
	'sovereign' => "party2 like 'SOVEREIGN%'"
);

our %subboroughs = (
'101'=> [20005,
	 20011,
	 20015,
	 20017,
	 20023,
	 20025,
	 20027,
	 20027,
	 20031,
	 20033,
	 20035,
	 20037,
	 20039,
	 20041,
	 20043,
	 20047,
	 20049,
	 20065,
	 20067,
	 20069,
	 20071,
	 20073,
	 20075,
	 20077,
	 20079,
	 20081,
	 20083,
	 20085,
	 20087,
	 20089,
	 20091,
	 20097,
	 20099,
	 20105,
	 20115,
	 20115,
	 20119,
	 20121,
	 20127,
	 20127,
	 20129,
	 20129,
	 20131],
'102'=>[
20058,
     20060,
     20121,
     20123,
     20125,
     20133,
     20135,
     20137,
     20139,
     20141,
     20145,
     20147,
     20149,
     20151,
     20153,
     20155,
     20157,
     20161,
     20163,
     20165,
     20167,
     20169,
     20220,
     20334,
     20359,
     20361,
     20363,
     20365,
     20367,
     20369,
     20369,
     20371,
     20373,
     20375,
     20375,
     20375,
     20377,
     20385,
     20387,
     20389,
     20391,
     20393,
     20397
],
'103'=>[
20057,
	20059,
	20059,
	20061,
	20143,
	20171,
	20173,
	20175,
	20177,
	20179,
	20181,
	20183,
	20187,
	20189,
	20193,
	20195,
	20197,
	20199,
	20201,
	20211,
	20213,
	20217,
	20219,
	20221,
	20223,
	20225,
	20379,
	20381,
	20383],
'104'=>[
	20053,
	20053,
	20205,
	20213,
	20215,
	20215,
	20217,
	20227,
	20227,
	20227,
	20229,
	20229,
	20231,
	20233,
	20233,
	20235,
	20235,
	20237,
	20239,
	20241,
	20243,
	20245,
	20247,
	20249,
	20251,
	20257
],
'105'=>[
	20237,
	20253,
	20255,
	20261,
	20263,
	20265,
	20269,
	20271,
	20399,
	20399,
	20401,
	20403,
	20405,
	20407,
	20407,
	20411,
	20413,
	20415,
	20419,
	20421,
	20423,
	20425,
	20429,
	20429,
	20431
],
'106'=>[
	20267,
	20271,
	20273,
	20277,
	20279,
	20281,
	20283,
	20285,
	20287,
	20289,
	20293,
	20295,
	20297,
	20301,
	20307,
	20317,
	20319,
	20323,
	20329,
	20333,
	20339,
	20341,
	20343,
	20345,
	20351,
	20403,
	20409,
	30309
],
'107'=>[
	20002,
	20004,
	20016,
	20020,
	20024,
	20028,
	20036,
	20038,
	20040,
	20040,
	20044,
	20046,
	20048,
	20050,
	20052,
	20054,
	20056,
	20062,
	20064,
	20066,
	20068,
	20070,
	20072,
	20074,
	20078,
	20084,
	20086,
	20088,
	20092,
	20094,
	20098,
	20102,
	20196,
	20202,
	20204,
	20206,
	20206,
	20208,
	20210,
	20212,
	20214,
	20216,
	20216,
	20218
],
'108'=>[
	20110,
	20118,
	20130,
	20132,
	20138,
	20144,
	20154,
	20156,
	20158,
	20160,
	20162,
	20164,
	20166,
	20184,
	20194,
	20264,
	20266,
	20266,
	20274,
	20276,
	20300,
	20302,
	20462,
	20462,
	20504,
	20516
],
'109'=>[
	20198,
	20224,
	20224,
	20228,
	20230,
	20232,
	20234,
	20236,
	20240,
	20242,
	20244,
	20246,
	20248,
	20250,
	20252,
	20254,
	20256,
	20258,
	20284,
	20286,
	20288,
	20296,
	20310,
	20312,
	20314,
	20316,
	20318,
	20320,
	20322,
	20324,
	20328,
	20330,
	20332,
	20336,
	20338,
	20340,
	20342,
	20344,
	20346,
	20350,
	20352,
	20354,
	20366
],
'110'=>[
	20356,
	20358,
	20364,
	20368,
	20370,
	20372,
	20374,
	20376,
	20378,
	20380,
	20382,
	20386,
	20388,
	20390,
	20392,
	20394,
	20396,
	20398,
	20404,
	20406,
	20408,
	20410,
	20414,
	20418,
	20420,
	20422,
	20424,
	20426,
	20428,
	20430,
	20432,
	20435,
	20436,
	20438,
	20440,
	20442,
	20446,
	20448,
	20449,
	20449,
	20451,
	20451,
	20454,
	20458,
	20460,
	20484,
	20502
],
'201'=>[
	30455,
	30465,
	30473,
	30477,
	30481,
	30491,
	30495,
	30497,
	30499,
	30501,
	30503,
	30505,
	30509,
	30511,
	30513,
	30515,
	30517,
	30519,
	30523,
	30525,
	30527,
	30529,
	30533,
	30535,
	30537,
	30539,
	30545,
	30547,
	30549,
	30551,
	30553,
	30555,
	30557,
	30559,
	30563,
	30565,
	30567,
	30569,
	30571,
	30573,
	30575,
	30577,
	30579,
	30589,
	30591,
	30593
],
'202'=>[
	30001,
	30003,
	30003,
	30005,
	30007,
	30009,
	30011,
	30013,
	30021,
	30023,
	30025,
	30027,
	30029,
	30029,
	30031,
	30033,
	30035,
	30037,
	30039,
	30041,
	30043,
	30069,
	30071,
	30127,
	30179,
	30181,
	30183,
	30185,
	30185,
	30187,
	30189,
	30191,
	30193,
	30195,
	30197,
	30199,
	30201,
	30227,
	30229,
	30231,
	30235,
	30543
],
'203'=>[
	30233,
	30237,
	30239,
	30241,
	30243,
	30245,
	30249,
	30251,
	30253,
	30255,
	30257,
	30259,
	30259,
	30261,
	30263,
	30265,
	30267,
	30269,
	30273,
	30275,
	30277,
	30279,
	30281,
	30283,
	30285,
	30287,
	30289,
	30291,
	30293,
	30295,
	30375,
	30377,
	30379,
	30383,
	30385,
	30387,
	30507,
	30531
],
'204'=>[
	30285,
	30389,
	30391,
	30393,
	30395,
	30397,
	30399,
	30401,
	30403,
	30405,
	30407,
	30409,
	30411,
	30413,
	30415,
	30417,
	30419,
	30421,
	30423,
	30425,
	30427,
	30429,
	30431,
	30433,
	30435,
	30437,
	30439,
	30441,
	30443,
	30445,
	30447,
	30453,
	30483,
	30487,
	30489,
	30493
],
'205'=>[
	31058,
	31070,
	31078,
	31098,
	31100,
	31102,
	31106,
	31110,
	31112,
	31114,
	31118,
	31120,
	31124,
	31140,
	31142,
	31142,
	31146,
	31148,
	31150,
	31152,
	31160,
	31162,
	31164,
	31166,
	31168,
	31170,
	31172,
	31172,
	31174,
	31176,
	31176,
	31178,
	31180,
	31182,
	31182,
	31184,
	31186,
	31188,
	31190,
	31192,
	31194,
	31196,
	31200,
	31202,
	31208,
	31210,
	31214,
	31220
],
'206'=>[
	30045,
	30047,
	30049,
	30051,
	30055,
	30057,
	30059,
	30063,
	30065,
	30067,
	30075,
	30077,
	30085,
	30117,
	30121,
	30123,
	30125,
	30129,
	30129,
	30131,
	30133,
	30135,
	30137,
	30139,
	30141,
	30143,
	30149,
	30151,
	30153,
	30155,
	30157,
	30159,
	30165,
	30167,
	30177
],
'207'=>[
	30002,
	30018,
	30020,
	30022,
	30072,
	30074,
	30076,
	30078,
	30080,
	30082,
	30084,
	30086,
	30088,
	30090,
	30092,
	30094,
	30096,
	30098,
	30100,
	30101,
	30102,
	30104,
	30106,
	30108,
	30110,
	30112,
	30118,
	30120,
	30122,
	30145,
	30147,
	30169,
	30171,
	30173,
	30175,
	30500,
	30502,
	30502,
	30504
],
'208'=>[
	30161,
	30163,
	30203,
	30205,
	30207,
	30215,
	30217,
	30219,
	30221,
	30223,
	30225,
	30247,
	30271,
	30271,
	30297,
	30299,
	30307,
	30309,
	30311,
	30313,
	30315,
	30317,
	30317,
	30337,
	30339,
	30341,
	30343,
	30345,
	30347,
	30349,
	30351,
	30353,
	30357,
	30359,
	30381
],
'209'=>[
	30213,
	30319,
	30321,
	30323,
	30325,
	30327,
	30329,
	30331,
	30333,
	30335,
	30355,
	30796,
	30798,
	30800,
	30802,
	30804,
	30806,
	30810,
	30812,
	30820,
	30822,
	30874,
	30874,
	30876,
	30878,
	30880
],
'210'=>[
	30030,
	30032,
	30034,
	30036,
	30038,
	30040,
	30042,
	30046,
	30050,
	30052,
	30052,
	30054,
	30056,
	30056,
	30058,
	30060,
	30062,
	30064,
	30066,
	30068,
	30070,
	30124,
	30128,
	30128,
	30130,
	30132,
	30134,
	30136,
	30138,
	30140,
	30142,
	30144,
	30146,
	30148,
	30150,
	30154,
	30156,
	30158,
	30160,
	30162,
	30164,
	30194,
	30196,
	30198,
	30200,
	30202,
	30204,
	30206,
	30208,
	30210,
	30212
],
'211'=>[
	30168,
	30170,
	30172,
	30174,
	30176,
	30178,
	30180,
	30182,
	30184,
	30186,
	30188,
	30190,
	30248,
	30250,
	30252,
	30254,
	30256,
	30258,
	30260,
	30262,
	30264,
	30266,
	30268,
	30270,
	30272,
	30274,
	30276,
	30278,
	30280,
	30282,
	30284,
	30286,
	30288,
	30290,
	30292,
	30294,
	30296,
	30298,
	30300,
	30302,
	30304,
	30400,
	30402,
	30404,
	30406,
	30408,
	30410,
	30412,
	30424,
	30426,
	30428,
	30430,
	30432,
	30434,
	30436
],
'212'=>[
	30114,
	30116,
	30192,
	30214,
	30216,
	30218,
	30220,
	30222,
	30224,
	30226,
	30228,
	30230,
	30232,
	30234,
	30236,
	30238,
	30240,
	30242,
	30244,
	30246,
	30438,
	30440,
	30442,
	30444,
	30446,
	30448,
	30450,
	30452,
	30454,
	30462,
	30464,
	30468,
	30470,
	30472,
	30474,
	30476,
	30478,
	30484,
	30486,
	30488,
	30490,
	30492,
	30494,
	30496,
	30498
],
'213'=>[
	30306,
	30308,
	30314,
	30320,
	30326,
	30328,
	30330,
	30336,
	30340,
	30342,
	30348,
	30348,
	30350,
	30352,
	30354,
	30356,
	30360,
	30360,
	30362,
	30364,
	30366,
	30370,
	30374,
	30382,
	30386,
	30398,
	30610
],
'214'=>[
	30456,
	30458,
	30460,
	30460,
	30462,
	30480,
	30482,
	30506,
	30508,
	30510,
	30512,
	30514,
	30516,
	30518,
	30520,
	30522,
	30524,
	30526,
	30528,
	30530,
	30532,
	30534,
	30536,
	30538,
	30540,
	30542,
	30544,
	30546,
	30748,
	30750,
	30752,
	30754,
	30756,
	30758,
	30760,
	30762,
	30764,
	30766,
	30770,
	30772,
	30774,
	30786,
	30788
],
'215'=>[
	30388,
	30390,
	30392,
	30394,
	30396,
	30414,
	30414,
	30416,
	30418,
	30420,
	30422,
	30548,
	30550,
	30552,
	30554,
	30556,
	30558,
	30560,
	30562,
	30564,
	30566,
	30568,
	30570,
	30572,
	30574,
	30576,
	30578,
	30580,
	30582,
	30584,
	30586,
	30588,
	30590,
	30592,
	30594,
	30594,
	30596,
	30598,
	30600,
	30606,
	30608,
	30612,
	30614,
	30616,
	30618,
	30622,
	30626,
	30628,
	30632,
	30638,
	30642
],
'216'=>[
	30301,
	30303,
	30361,
	30363,
	30365,
	30365,
	30367,
	30369,
	30371,
	30373,
	30892,
	30894,
	30896,
	30898,
	30900,
	30902,
	30904,
	30906,
	30908,
	30910,
	30912,
	30914,
	30916,
	30918,
	30920,
	30922,
	31122,
	31126,
	31128,
	31130,
	31132,
	31134,
	31136,
	31138,
	31154,
	31156,
	31158
],
'217'=>[
	30780,
	30782,
	30784,
	30790,
	30792,
	30794,
	30814,
	30816,
	30818,
	30824,
	30826,
	30828,
	30830,
	30832,
	30834,
	30836,
	30838,
	30840,
	30842,
	30846,
	30848,
	30850,
	30852,
	30854,
	30856,
	30858,
	30860,
	30862,
	30864,
	30866,
	30868,
	30870,
	30872,
	30882,
	30884,
	30886,
	30888,
	30890,
	30928,
	30930,
	30934,
	30936,
	30938,
	30940,
	30942
],
'218'=>[
	30636,
	30640,
	30644,
	30646,
	30648,
	30650,
	30652,
	30654,
	30656,
	30658,
	30660,
	30662,
	30666,
	30670,
	30672,
	30674,
	30676,
	30678,
	30680,
	30682,
	30686,
	30688,
	30690,
	30692,
	30696,
	30698,
	30700,
	30702,
	30702,
	30702,
	30706,
	30720,
	30722,
	30724,
	30726,
	30728,
	30730,
	30732,
	30734,
	30736,
	30738,
	30740,
	30742,
	30744,
	30746,
	30776,
	30844,
	30944,
	30944,
	30950,
	30954,
	30956,
	30958,
	30960,
	30962,
	30964,
	30966,
	30968,
	30970,
	30974,
	30982,
	30984,
	30986,
	30988,
	30990,
	30992,
	30994,
	30996,
	30998,
	31004,
	31006,
	31008,
	31010,
	31012,
	31014,
	31016,
	31018,
	31020,
	31022,
	31024,
	31026
],
'301'=>[
	10001,
	10005,
	10007,
	10009,
	10013,
	10015,
	10015,
	10021,
	10031,
	10033,
	10039,
	10041,
	10043,
	10045,
	10047,
	10049,
	10051,
	10053,
	10055,
	10055,
	10057,
	10059,
	10061,
	10063,
	10065,
	10067,
	10069,
	10071,
	10073,
	10075,
	10077,
	10079,
	10317,
	10317,
	10319
],
'302'=>[
	10002,
	10002,
	10006,
	10008,
	10010,
	10010,
	10012,
	10014,
	10014,
	10016,
	10018,
	10020,
	10022,
	10022,
	10024,
	10025,
	10026,
	10026,
	10027,
	10028,
	10029,
	10030,
	10030,
	10032,
	10034,
	10036,
	10036,
	10038,
	10040,
	10042
],
'303'=>[
	10052,
	10054,
	10056,
	10058,
	10074,
	10076,
	10081,
	10083,
	10084,
	10087,
	10089,
	10091,
	10093,
	10094,
	10095,
	10096,
	10097,
	10099,
	10101,
	10102,
	10103,
	10104,
	10109,
	10111,
	10112,
	10112,
	10113,
	10115,
	10117,
	10119,
	10121,
	10125,
	10127,
	10129,
	10131,
	10133,
	10135,
	10137,
	10139
],
'304'=>[
	10044,
	10044,
	10048,
	10050,
	10060,
	10062,
	10064,
	10066,
	10068,
	10070,
	10072,
	10078,
	10080,
	10082,
	10086,
	10088,
	10090,
	10092,
	10098,
	10100,
	10106,
	10108,
	10112
],
'305'=>[
	30143,
	10145,
	10147,
	10149,
	10151,
	10153,
	10155,
	10157,
	10159,
	10161,
	10163,
	10165,
	10167,
	10169,
	10171,
	10173,
	10175,
	10177,
	10179,
	10181,
	10183,
	10185,
	10187,
	10189,
	10191,
	10315
],
'306'=>[
	30106,
	10110,
	10114,
	10114,
	10116,
	10118,
	10120,
	10122,
	10124,
	10126,
	10128,
	10130,
	10132,
	10134,
	10136,
	10138,
	10140,
	10142,
	10144,
	10144,
	10146,
	10146,
	10148,
	10148,
	10150,
	10150,
	10152,
	10154,
	10156,
	10158,
	10160,
	10238
],
'307'=>[
	30193,
	10195,
	10197,
	10199,
	10201,
	10203,
	10205,
	10207,
	10209,
	10211,
	10213,
	10217,
	10219,
	10221,
	10223,
	10223,
	10225,
	10227,
	10229,
	10231,
	10233,
	10235,
	10237
],
'308'=>[
	10186,
	10190,
	10197,
	10200,
	10201,
	10206,
	10207,
	10208,
	10209,
	10212,
	10213,
	10214,
	10216,
	10217,
	10218,
	10220,
	10221,
	10222,
	10224,
	10226,
	10227,
	10228,
	10230,
	10231,
	10232,
	10234,
	10235,
	10236,
	10243
],
'309'=>[
	10156,
	10158,
	10160,
	10162,
	10164,
	10166,
	10168,
	10170,
	10172,
	10172,
	10174,
	10174,
	10178,
	10180,
	10182,
	10184,
	10188,
	10192,
	10194,
	10196,
	10198,
	10202,
	10204,
	10210,
	10240
],
'310'=>[
	10239,
	10241,
	10243,
	10245,
	10247,
	10249,
	10251,
	10253,
	10255,
	10261,
	10263,
	10265,
	10267,
	10269,
	10271,
	10273,
	10275,
	10277,
	10279,
	10281,
	10283,
	10285,
	10287,
	10289,
	10291,
	10293,
	10295,
	10297,
	10301,
	10303,
	10307,
	10311,
	10313
],
'401'=>[
	20010,
	40025,
	40027,
	40029,
	40031,
	40035,
	40037,
	40039,
	40041,
	40043,
	40045,
	40047,
	40049,
	40051,
	40053,
	40055,
	40057,
	40059,
	40061,
	40063,
	40065,
	40067,
	40069,
	40071,
	40073,
	40075,
	40077,
	40079,
	40081,
	40083,
	40087,
	40091,
	40095,
	40097,
	40099,
	40101,
	40103,
	40105,
	40107,
	40111,
	40113,
	40115,
	40117,
	40119,
	40121,
	40123,
	40135,
	40137,
	40141,
	40143,
	40145,
	40147,
	40149,
	40151,
	40153,
	40155,
	40157,
	40159,
	40161,
	40163,
	40299,
	40317
],
'402'=>[
40001,
	40007,
	40019,
	40169,
	40171,
	40179,
	40181,
	40183,
	40185,
	40187,
	40189,
	40191,
	40197,
	40205,
	40205,
	40219,
	40229,
	40235,
	40243,
	40245,
	40247,
	40249,
	40251,
	40253,
	40255,
	40257,
	40259,
	40261,
	40263,
	40265,
	40293,
	40295,
	40297,
	40479,
	40483,
	40485,
	40489
],
'403'=>[
40273,
	40275,
	40277,
	40279,
	40281,
	40283,
	40285,
	40287,
	40289,
	40291,
	40309,
	40309,
	40327,
	40329,
	40331,
	40337,
	40339,
	40347,
	40351,
	40353,
	40355,
	40361,
	40363,
	40365,
	40367,
	40369,
	40371,
	40373,
	40375,
	40377,
	40379,
	40381,
	40401,
	40403,
	40405,
	40407,
	40409
],
'404'=>[
40267,
	40269,
	40271,
	40383,
	40399,
	40411,
	40413,
	40415,
	40427,
	40437,
	40439,
	40443,
	40455,
	40457,
	40459,
	40461,
	40463,
	40465,
	40467,
	40469,
	40471,
	40473,
	40475,
	40481,
	40499,
	40683
],
'405'=>[
40493,
	40493,
	40495,
	40497,
	40505,
	40507,
	40511,
	40513,
	40515,
	40517,
	40521,
	40525,
	40527,
	40529,
	40535,
	40539,
	40545,
	40547,
	40549,
	40551,
	40553,
	40555,
	40557,
	40559,
	40561,
	40565,
	40567,
	40577,
	40579,
	40581,
	40583,
	40585,
	40587,
	40589,
	40591,
	40593,
	40595,
	40599,
	40601,
	40603,
	40607,
	40613,
	40619,
	40621,
	40623,
	40625,
	40627,
	40629,
	40633,
	40633,
	40635,
	40637,
	40639,
	40655,
	40657,
	40657,
	40659,
	40661,
	40663,
	40665,
	40667,
	40669,
	40671,
	40671,
	40677,
	40679
],
'406'=>[
40645,
	40687,
	40693,
	40695,
	40697,
	40697,
	40703,
	40707,
	40709,
	40711,
	40713,
	40713,
	40717,
	40719,
	40721,
	40725,
	40727,
	40729,
	40731,
	40733,
	40735,
	40737,
	40739,
	40741,
	40743,
	40745,
	40747,
	40757,
	40769,
	40769,
	40771
],
'407'=>[
40797,
	40799,
	40803,
	40803,
	40837,
	40845,
	40851,
	40853,
	40855,
	40857,
	40859,
	40861,
	40863,
	40865,
	40867,
	40871,
	40875,
	40889,
	40889,
	40907,
	40919,
	40925,
	40929,
	40939,
	40945,
	40947,
	40973,
	40981,
	40987,
	40991,
	40997,
	40997,
	40999,
	41017,
	41029,
	41033,
	41039,
	41047,
	41059,
	41141,
	41147,
	41151,
	41155,
	41157,
	41159,
	41161,
	41163,
	41167,
	41171,
	41175,
	41185,
	41187,
	41189,
	41191,
	41193,
	41195,
	41199,
	41201,
	41203,
	41205,
	41207,
	41211,
	41215
],
'408'=>[
40214,
	40220,
	40220,
	40230,
	40232,
	40236,
	40448,
	40450,
	40452,
	40454,
	40456,
	40458,
	40464,
	40466,
	40472,
	40476,
	40478,
	40492,
	40779,
	40779,
	40779,
	40779,
	40779,
	40793,
	40809,
	41223,
	41227,
	41227,
	41241,
	41247,
	41257,
	41265,
	41267,
	41273,
	41275,
	41283,
	41333,
	41339,
	41341,
	41347
],
'409'=>[
40002,
	40004,
	40006,
	40008,
	40010,
	40012,
	40014,
	40016,
	40018,
	40020,
	40022,
	40024,
	40026,
	40028,
	40030,
	40032,
	40034,
	40036,
	40038,
	40040,
	40042,
	40052,
	40108,
	40110,
	40112,
	40114,
	40116,
	40118,
	40120,
	40122,
	40124,
	40126,
	40126,
	40128,
	40130,
	40132,
	40134,
	40136,
	40138,
	40140,
	40142,
	40142,
	40144,
	40148,
	40150,
	40152,
	40154,
	40156,
	40216,
	40641,
	40641,
	40773,
	40775
],
'410'=>[
40040,
	40044,
	40044,
	40050,
	40054,
	40058,
	40062,
	40086,
	40088,
	40094,
	40096,
	40098,
	40100,
	40102,
	40104,
	40106,
	40158,
	40164,
	40166,
	40168,
	40170,
	40172,
	40174,
	40176,
	40178,
	40180,
	40814,
	40818,
	40838,
	40840,
	40846,
	40846,
	40864,
	40884,
	40892
],
'411'=>[
41081,
	41081,
	41083,
	41091,
	41097,
	41099,
	41113,
	41123,
	41129,
	41133,
	41139,
	41181,
	41291,
	41291,
	41319,
	41367,
	41377,
	41385,
	41385,
	41399,
	41403,
	41409,
	41409,
	41417,
	41417,
	41429,
	41435,
	41441,
	41447,
	41451,
	41451,
	41459,
	41463,
	41467,
	41471,
	41479,
	41483,
	41507,
	41507,
	41529
],
'412'=>[
40182,
	40184,
	40184,
	40186,
	40188,
	40190,
	40192,
	40194,
	40194,
	40196,
	40198,
	40202,
	40204,
	40206,
	40208,
	40212,
	40238,
	40240,
	40244,
	40246,
	40248,
	40250,
	40252,
	40258,
	40260,
	40262,
	40264,
	40266,
	40270,
	40272,
	40274,
	40276,
	40278,
	40280,
	40282,
	40284,
	40288,
	40292,
	40330,
	40334,
	40334,
	40352,
	40366,
	40368,
	40376,
	40384,
	40394,
	40398,
	40400,
	40402,
	40404,
	40410,
	40414,
	40420,
	40422,
	40426,
	40432,
	40434,
	40440,
	40442,
	40446,
	40446,
	40460,
	40462,
	40468,
	40470,
	40480,
	40482,
	40484,
	40500,
	40502,
	40502,
	40504,
	40506,
	40508,
	40510,
	40518,
	40520,
	40522,
	40524,
	40526,
	40528,
	40530,
	40768,
	40788,
	40790,
	40792
],
'413'=>[
40304,
	40320,
	40328,
	40358,
	40496,
	40512,
	40516,
	40532,
	40534,
	40536,
	40538,
	40540,
	40542,
	40548,
	40552,
	40554,
	40556,
	40558,
	40560,
	40562,
	40564,
	40566,
	40568,
	40578,
	40580,
	40588,
	40590,
	40592,
	40594,
	40596,
	40598,
	40600,
	40602,
	40604,
	40606,
	40608,
	40610,
	40612,
	40614,
	40616,
	40616,
	40618,
	40620,
	40624,
	40626,
	40630,
	40632,
	40638,
	40646,
	40650,
	40654,
	40656,
	40660,
	40664,
	40680,
	40682,
	40690,
	40694,
	40716,
	40766,
	41301,
	41551,
	41551,
	41567,
	41571,
	41571,
	41579,
	41579,
	41579,
	41617,
	41621
],
'414'=>[
40916,
	40916,
	40918,
	40922,
	40928,
	40934,
	40938,
	40942,
	40942,
	40942,
	40952,
	40962,
	40964,
	40972,
	40972,
	40992,
	40998,
	41008,
	41010,
	41010,
	41032,
	41032,
	41072
]
		    );
